[
  { "key": "alt+k", "command": "cursorUp", "when": "textInputFocus" },
  {
    "key": "alt+k",
    "command": "notebook.cell.chat.previousFromHistory",
    "when": "inlineChatFocused && notebookCellChatFocused"
  },
  {
    "key": "alt+k",
    "command": "editor.action.scrollUpHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "alt+k",
    "command": "editor.action.selectPreviousStickyScrollLine",
    "when": "stickyScrollFocused"
  },
  {
    "key": "alt+k",
    "command": "notebook.focusPreviousEditor",
    "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'"
  },
  {
    "key": "alt+k",
    "command": "showPrevParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "alt+k",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "alt+k",
    "command": "focusPreviousRenameSuggestion",
    "when": "renameInputVisible"
  },
  {
    "key": "alt+k",
    "command": "history.showPrevious",
    "when": "historyNavigationBackwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible"
  },
  {
    "key": "alt+k",
    "command": "iconSelectBox.focusUp",
    "when": "iconSelectBoxFocus"
  },
  {
    "key": "alt+k",
    "command": "interactive.history.previous",
    "when": "!suggestWidgetVisible && activeEditor == 'workbench.editor.interactive' && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'"
  },
  {
    "key": "alt+k",
    "command": "interactive.history.previous",
    "when": "!suggestWidgetVisible && activeEditor == 'workbench.editor.repl' && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'"
  },
  {
    "key": "alt+k",
    "command": "list.focusUp",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "alt+k",
    "command": "notebook.focusPreviousEditor",
    "when": "config.notebook.navigation.allowNavigateToSurroundingCells && notebookCursorNavigationMode && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && !notebookCellMarkdownEditMode && notebookCellType == 'markup'"
  },
  {
    "key": "alt+k",
    "command": "notifications.focusPreviousToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "alt+k",
    "command": "quickInput.previous",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "alt+k",
    "command": "scm.viewPreviousCommit",
    "when": "scmInputIsInFirstPosition && scmRepository && !suggestWidgetVisible"
  },
  {
    "key": "alt+k",
    "command": "workbench.action.interactivePlayground.arrowUp",
    "when": "interactivePlaygroundFocus && !editorTextFocus"
  },
  {
    "key": "alt+k",
    "command": "workbench.action.terminal.chat.previousFromHistory",
    "when": "terminalChatFocus"
  },
  {
    "key": "alt+k",
    "command": "workbench.banner.focusPreviousAction",
    "when": "bannerFocused"
  },
  {
    "key": "alt+k",
    "command": "workbench.statusBar.focusPrevious",
    "when": "statusBarFocused"
  },
  {
    "key": "alt+k",
    "command": "notebook.cell.nullAction",
    "when": "notebookOutputInputFocused"
  },
  {
    "key": "alt+k",
    "command": "workbench.action.terminal.selectPrevSuggestion",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
  },
  {
    "key": "alt+k",
    "command": "extension.vim_up",
    "when": "editorTextFocus && vim.active && !inDebugRepl && !parameterHintsVisible && !suggestWidgetVisible"
  },
  {
    "key": "alt+k",
    "command": "selectPrevCodeAction",
    "when": "codeActionMenuVisible"
  }
]
